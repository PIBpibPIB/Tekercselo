unit Declarations;

var
  LCD_RS           : sbit  at LATB5_bit;
  LCD_EN           : sbit  at LATB4_bit;
  LCD_D4           : sbit  at LATA3_bit;
  LCD_D5           : sbit  at LATA2_bit;
  LCD_D6           : sbit  at LATA1_bit;
  LCD_D7           : sbit  at LATA0_bit;

  LCD_RS_Direction : sbit at TRISB5_bit;
  LCD_EN_Direction : sbit at TRISB4_bit;
  LCD_D4_Direction : sbit at TRISA3_bit;
  LCD_D5_Direction : sbit at TRISA2_bit;
  LCD_D6_Direction : sbit at TRISA1_bit;
  LCD_D7_Direction : sbit at TRISA0_bit;

  ROTARY_1         : sbit at PORTD.7;
  ROTARY_2         : sbit at PORTB.1;

  STEP             : sbit at LATD.6;
  DIR              : sbit at LATB.3;

  ENDSTOP_RIGHT    : sbit at PORTC.7;
  ENDSTOP_LEFT     : sbit at PORTD.3;

  BUTTON_STOP      : sbit at PORTC.6;

  BEEPER           : sbit at LATC.1;

var
  i                   : byte;
  
  liCounter           : longint; volatile;
  ROTARY_1_LS         : boolean; volatile;
  INPUT_LS            : byte;    volatile;
  BUTTONFLAGS         : byte;    volatile;
  
  dwTicks             : dword;   volatile;
  dwNextLCDUpdateTime : dword;
  dwNextRPMMeasTime   : dword;
  
  wPulsePerRotary     : word; //[(pulse count *MAGICNUMBER) / (revolution /20) ]
  wMotorAcc           : word;

const MAGICNUMBER = 250;

procedure initialize;
  
implementation
//------------------------------------------------------------------------------
procedure initialize;
begin
  //Disable interrupts
  INTCON := 0;                             // Disable GIE, PEIE, TMR0IE,INT0IE,RBIE
  INTCON2 :=0;
  INTCON3 := 0;
  RCON.IPEN := 0;                          // Disable Priority Levels on interrupts
  PIE1 := 0;
  PIE2 := 0;
  PIE3 := 0;
  PIR1 := 0;
  PIR2 := 0;
  PIR3 := 0;

  //komparatorok tiltva
  CM1CON := 0;
  CM2CON := 0;
  CM3CON := 0;

  //minden input digital
  ANCON0 := %11011111;
  ANCON1 := %00011110;

  //digitalis kimenetek
  TRISA := 0xFF;
  TRISB := 0xFF;
  TRISC := 0xFF;
  TRISD := 0xFF;
  TRISE := 0xFF;
  
  TRISD.6 := 0; //STEP
  TRISB.3 := 0; //DIR
  
  TRISC.1 := 0; //BUZZER
  TRISB.0 := 0; //PWM output

  //start interrupt
  INTCON.GIE := 1;

  //Enable peripheral interrupts
  INTCON.PEIE := 1;

  RBPU_bit := 1;
  REPU_bit := 1;
end;
//------------------------------------------------------------------------------
end.
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------