unit feedrate;
uses Declarations;

procedure Feedrate_Set(val : word);            // !!!!     [ um / revolution ]      !!!!!
function  Feedrate_Get : word;                 // !!!!     [ um / revolution ]      !!!!!
procedure StepMotor_interrupt;

implementation
const MAGICNUMBER = 250;
var
  feedrate      : word;                        // !!!!     [ um / revolution ]      !!!!!
  pulsewaittime : byte;
  
//------------------------------------------------------------------------------
procedure Feedrate_Set(val : word);
begin
  if val > 1500 then
    val := 1500;
    
  feedrate := val;
  
  // ((200 / 1500) * d) / 20  <==>   d / 150
  // Szorzás MAGICNUMBER-rel, hogy legyen tört számláló.
  wPulsePerRotary := (dword(MAGICNUMBER) * feedrate) / (150.0 / 8.0);
end;
//------------------------------------------------------------------------------
function Feedrate_Get : word;
begin
  result := feedrate;
end;
//------------------------------------------------------------------------------
procedure StepMotor_interrupt;
begin
  if STEP = 1 then
  begin
    STEP := 0;
    pulsewaittime := 1;
  end
  else
  begin
    if pulsewaittime = 0 then
    begin
      if wMotorAcc >= MAGICNUMBER then
      begin
        STEP := 1;
        wMotorAcc := wMotorAcc - MAGICNUMBER;
      end;
    end
    else
      dec(pulsewaittime);
  end;
end;
//------------------------------------------------------------------------------
end.
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------