unit Buttons;
uses
  Beep,
  PWM,
  feedrate,
  Display,
  Declarations;

procedure Buttons_mainloop;

//display photo:  ac:display

//------------------------------------------------------------------------------
//
//                 UP
//  SELECT  LEFT       RIGHT RST
//                DOWN
//
//                 2
//  0       1          4     5
//                 3
//------------------------------------------------------------------------------
implementation
const
  SELECT      = 0;
  LEFT        = 1;
  UP          = 2;
  DOWN        = 3;
  RIGHT       = 4;
  STOP        = 5;

  ENDSTOP_R   = 6;
  ENDSTOP_L   = 7;

//------------------------------------------------------------------------------
function isbetween(val, min, max : word) : boolean;
begin
  if val > max then begin result := false; exit; end;
  if val < min then begin result := false; exit; end;
  result := true;
end;
//------------------------------------------------------------------------------
procedure Buttons_mainloop;
var
  adval     : word;
  k         : word;
  INPUT     : byte;
  wi : word;
  bi : byte;
begin
  adval :=  ADC_Read(8);

  INPUT := 0;

  if isbetween(adval,    0,  298) then INPUT.RIGHT  := 1;
  if isbetween(adval,  323,  794) then INPUT.UP     := 1;
  if isbetween(adval,  993, 1588) then INPUT.DOWN   := 1;
  if isbetween(adval, 1638, 2308) then INPUT.LEFT   := 1;
  if isbetween(adval, 2730, 3127) then INPUT.SELECT := 1;

  INPUT.STOP      := BUTTON_STOP;
  INPUT.ENDSTOP_R := ENDSTOP_RIGHT;
  INPUT.ENDSTOP_L := ENDSTOP_LEFT;

  //Button edge detection
  k := INPUT xor INPUT_LS;
  if k > 0 then
  begin
    //Edge was detected
    for i := 0 to 7 do
    begin
      if (k.i = 1) and (INPUT.i = 0) then
      begin
        BUTTONFLAGS.i := 1;
        Beep(5);
      end;
    end;
  end;
  INPUT_LS := INPUT;

  if BUTTONFLAGS > 0 then
  begin
    for i := 0 to 7 do
    begin
      if BUTTONFLAGS.i = 1 then
      begin
        case i of
          //--------------------------------------------------------------
          SELECT :
          begin
            liCounter := 0;
            LCD_refreshvalues;
          end;
          //--------------------------------------------------------------
          LEFT :
          begin
            DIR := 0;
            wMotorAcc := wMotorAcc + 250 * 5 * 200;
          end;
          //--------------------------------------------------------------
          RIGHT :
          begin
            DIR := 1;
            wMotorAcc := wMotorAcc + 250 * 5 * 200;
          end;
          //--------------------------------------------------------------
          UP :      
          begin
            wi := Feedrate_Get;
            wi := wi + 10;
            Feedrate_Set(wi);
            
            LCD_refreshvalues;
          end;
          //--------------------------------------------------------------
          DOWN :
          begin                             
            wi := Feedrate_Get;
            if wi > 10 then
            begin
              wi := wi - 10;
              Feedrate_Set(wi);
            end;
            
            LCD_refreshvalues;
          end;
          //--------------------------------------------------------------
          STOP :
          begin
            PWM_Set(0);
          end;
          //--------------------------------------------------------------
          ENDSTOP_R :
          begin
            DIR := not DIR;
          end;
          //--------------------------------------------------------------
          ENDSTOP_L :
          begin
            DIR := not DIR;
          end;
          //--------------------------------------------------------------
        end;

        BUTTONFLAGS.i := 0;
      end;
    end;
  end;
end;
//------------------------------------------------------------------------------
end.
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------